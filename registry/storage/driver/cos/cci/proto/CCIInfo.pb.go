// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CCIInfo.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CCIHasCvmIpRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCIHasCvmIpRequest) Reset()         { *m = CCIHasCvmIpRequest{} }
func (m *CCIHasCvmIpRequest) String() string { return proto.CompactTextString(m) }
func (*CCIHasCvmIpRequest) ProtoMessage()    {}
func (*CCIHasCvmIpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca73de8093a8df5, []int{0}
}

func (m *CCIHasCvmIpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCIHasCvmIpRequest.Unmarshal(m, b)
}
func (m *CCIHasCvmIpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCIHasCvmIpRequest.Marshal(b, m, deterministic)
}
func (m *CCIHasCvmIpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCIHasCvmIpRequest.Merge(m, src)
}
func (m *CCIHasCvmIpRequest) XXX_Size() int {
	return xxx_messageInfo_CCIHasCvmIpRequest.Size(m)
}
func (m *CCIHasCvmIpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CCIHasCvmIpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CCIHasCvmIpRequest proto.InternalMessageInfo

func (m *CCIHasCvmIpRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CCIHasCvmIpResponse struct {
	Has                  bool     `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCIHasCvmIpResponse) Reset()         { *m = CCIHasCvmIpResponse{} }
func (m *CCIHasCvmIpResponse) String() string { return proto.CompactTextString(m) }
func (*CCIHasCvmIpResponse) ProtoMessage()    {}
func (*CCIHasCvmIpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca73de8093a8df5, []int{1}
}

func (m *CCIHasCvmIpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCIHasCvmIpResponse.Unmarshal(m, b)
}
func (m *CCIHasCvmIpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCIHasCvmIpResponse.Marshal(b, m, deterministic)
}
func (m *CCIHasCvmIpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCIHasCvmIpResponse.Merge(m, src)
}
func (m *CCIHasCvmIpResponse) XXX_Size() int {
	return xxx_messageInfo_CCIHasCvmIpResponse.Size(m)
}
func (m *CCIHasCvmIpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CCIHasCvmIpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CCIHasCvmIpResponse proto.InternalMessageInfo

func (m *CCIHasCvmIpResponse) GetHas() bool {
	if m != nil {
		return m.Has
	}
	return false
}

func init() {
	proto.RegisterType((*CCIHasCvmIpRequest)(nil), "proto.CCIHasCvmIpRequest")
	proto.RegisterType((*CCIHasCvmIpResponse)(nil), "proto.CCIHasCvmIpResponse")
}

func init() { proto.RegisterFile("CCIInfo.proto", fileDescriptor_9ca73de8093a8df5) }

var fileDescriptor_9ca73de8093a8df5 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x75, 0x76, 0xf6, 0xf4,
	0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x2a, 0x5c,
	0x42, 0xce, 0xce, 0x9e, 0x1e, 0x89, 0xc5, 0xce, 0x65, 0xb9, 0x9e, 0x05, 0x41, 0xa9, 0x85, 0xa5,
	0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x05, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x4c, 0x99, 0x05, 0x4a, 0xea, 0x5c, 0xc2, 0x28, 0xaa, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0x04, 0xb8, 0x98, 0x33, 0x12, 0x8b, 0xc1, 0xea, 0x38, 0x82, 0x40, 0x4c, 0xa3, 0x50, 0x2e, 0x3e,
	0xa8, 0x35, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xce, 0x5c, 0x1c, 0x19, 0x50, 0x7d,
	0x42, 0x92, 0x10, 0xbb, 0xf5, 0x30, 0x6d, 0x94, 0x92, 0xc2, 0x26, 0x05, 0xb1, 0x46, 0x89, 0xc1,
	0x49, 0x86, 0x8b, 0x13, 0x22, 0x9d, 0x9c, 0x9c, 0xe9, 0xc4, 0x03, 0xb5, 0x21, 0x00, 0x24, 0xd2,
	0xc1, 0xc8, 0x98, 0xc4, 0x06, 0x96, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x11, 0x12,
	0xad, 0xe2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CCIInfoServiceClient is the client API for CCIInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCIInfoServiceClient interface {
	HasCvmIp(ctx context.Context, in *CCIHasCvmIpRequest, opts ...grpc.CallOption) (*CCIHasCvmIpResponse, error)
}

type cCIInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewCCIInfoServiceClient(cc *grpc.ClientConn) CCIInfoServiceClient {
	return &cCIInfoServiceClient{cc}
}

func (c *cCIInfoServiceClient) HasCvmIp(ctx context.Context, in *CCIHasCvmIpRequest, opts ...grpc.CallOption) (*CCIHasCvmIpResponse, error) {
	out := new(CCIHasCvmIpResponse)
	err := c.cc.Invoke(ctx, "/proto.CCIInfoService/hasCvmIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCIInfoServiceServer is the server API for CCIInfoService service.
type CCIInfoServiceServer interface {
	HasCvmIp(context.Context, *CCIHasCvmIpRequest) (*CCIHasCvmIpResponse, error)
}

// UnimplementedCCIInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCCIInfoServiceServer struct {
}

func (*UnimplementedCCIInfoServiceServer) HasCvmIp(ctx context.Context, req *CCIHasCvmIpRequest) (*CCIHasCvmIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCvmIp not implemented")
}

func RegisterCCIInfoServiceServer(s *grpc.Server, srv CCIInfoServiceServer) {
	s.RegisterService(&_CCIInfoService_serviceDesc, srv)
}

func _CCIInfoService_HasCvmIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCIHasCvmIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCIInfoServiceServer).HasCvmIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CCIInfoService/HasCvmIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCIInfoServiceServer).HasCvmIp(ctx, req.(*CCIHasCvmIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CCIInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CCIInfoService",
	HandlerType: (*CCIInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hasCvmIp",
			Handler:    _CCIInfoService_HasCvmIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CCIInfo.proto",
}
